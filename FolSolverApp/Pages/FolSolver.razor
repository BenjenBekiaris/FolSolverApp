@page "/"

<PageTitle>FolSolver</PageTitle>
<div class="top-bar">
    <h2 class="page-title">FolSolver</h2>
    <div class="middle-panel">
        <NavLink style="text-decoration:none" target="_blank" href="documentation">
            <span class="middle-panel-button">Documentation</span>
        </NavLink>
    </div>
    <div class="top-bar-buttons">
        @for (int i = 0; i < LanguageVariations.processDescriptions.Count; i++)
        {
            int currentIndex = i;
            <button class="switch-language" @onclick="() => SwitchLanguage(currentIndex)">@LanguageVariations.availibleLanguages[currentIndex]</button>
        }
    </div>
</div>
    
<div style="margin-top:15px">
    <div class="user-input">
        <textarea class="user-input" type="text" placeholder=@LanguageVariations.inputMessage[language] @ref="inputField" value="@userInput" @oninput="HandleInput" />
        <button class="read-formula" @onclick="() => HandleButtonClick()">@LanguageVariations.processButton[language]</button>
    </div>
    <div class="input-bottom-bar">
        <div class="special-symbols">
            @foreach (var entry in InputDictionary.specialSymbols)
            {
                <button class="special-symbols" @onclick="() => AddSpecialSymbol(entry.Key)">@entry.Key</button>
            }
        </div>
        <select class="example-formula" @onchange="ExampleOptionSelected">
            <option class="example-formula" value="-1">@LanguageVariations.exampleSelector[language][0]</option>
            @for (int i = 0; i < ExampleFormulas.Examples.Count; i++)
            {
                int currentIndex = i;
                <option class="example-formula" value="@currentIndex">@LanguageVariations.exampleSelector[language][1] @(currentIndex + 1)</option>
            }
        </select>
    </div>
        
</div>

@if (cnf.Count != 0)
{
    <input type="checkbox" id="modification-proccess" class="accordion-checkbox" />
    <label for="modification-proccess" class="accordion-title">@LanguageVariations.processDescriptions[language][0]</label>
    <div class="accordion-content">
        @for (int i = 0; i < LanguageVariations.processDescriptions[language].Length - 1; i++)
        {
            <input type="checkbox" id="@i" class="accordion-checkbox" />
            <label for="@i" class="accordion-title">@LanguageVariations.processDescriptions[language][i+1]</label>
            <div class="accordion-content">
                @formulaData[i]
            </div>
            <br />
        }
    </div>
}

@if (cnf.Count != 0)
{
    <div class="resolution">
        <div class="clauses">
            @for (int i = 0; i < cnf.Count; i++)
            {
                int currentIndex = i;
                <button class="clauses @((i == selectedClauseOne || i == selectedClauseTwo) ? "clauses-selected" : "") 
                 @((i == alreadyExistingClause) ? "clauses-exists" : "")" @onclick="() => SelectClauseForButton(currentIndex)">
                    @Utils.PrintClause(cnf[i])
                </button>
            }
        </div>
        <div class="history">
            @if (history.Count != 0)
            {
                <table class="history">
                    <tr>
                        <th>@LanguageVariations.tableHeaders[language][0]</th>
                        <th>@LanguageVariations.tableHeaders[language][1]</th>
                        <th>@LanguageVariations.tableHeaders[language][2]</th>
                        <th>@LanguageVariations.tableHeaders[language][3]</th>
                    </tr>
                    @for (int i = 0; i < history.Count; i++)
                    {
                        <tr>
                            <td>@history[i][0]</td>
                            <td>@history[i][1]</td>
                            <td>@history[i][2]</td>
                            <td>@history[i][3]</td>
                        </tr>
                    }
                </table>
                <button class="copy-history-to-clipboard" @onclick="CopyHistoryToClipBoard">@LanguageVariations.copyButton[language]</button>
            }
        </div>
    </div>
    <div class="selectedClauses">
        <button class="selectedClauses @((selectedButton == 0) ? "selectedClauses-selected" : "")" @onclick="() => SelectButton(0)">
            @if (selectedClauseOne != -1)
            {
                <b>@Utils.PrintClause(cnf[selectedClauseOne])</b>
            }
            else
            {
                <b>@LanguageVariations.chooseClause[language]</b>
            }
        </button>
        <button class="selectedClauses @((selectedButton == 1) ? "selectedClauses-selected" : "")" @onclick="() => SelectButton(1)">
            @if (selectedClauseTwo != -1)
            {
                <b>@Utils.PrintClause(cnf[selectedClauseTwo])</b>
            }
            else
            {
                <b>@LanguageVariations.chooseClause[language]</b>
            }
        </button>
        @if (possibleClause == null && selectedClauseOne != -1 && selectedClauseTwo != -1)
        {
            <button class="selectedClauses">@LanguageVariations.unificationError[language]</button>
        }
        @if (possibleClause != null)
        {
            <button class="selectedClauses" @onclick="() => AddResolvedClause()">
                @Utils.PrintClause(possibleClause)
            </button>
        }
    </div>
}

@code {
    [Inject] private IJSRuntime JSRuntime { get; set; }
    ElementReference inputField;

    private Formula formula = new Formula();
    private List<Predicate[]> cnf = new List<Predicate[]>();

    private List<string[]> history = new List<string[]>();
    private string historyInLatex = "";
    private int numberOfGivenClauses = 0;

    private Predicate[]? possibleClause = null;
    private List<string[]>? possibleMGU = null;

    string userInput = "";

    string[] formulaData = new string[11];

    int selectedButton = 0;
    int alreadyExistingClause = -1;

    int selectedClauseOne = -1;
    int selectedClauseTwo = -1;

    int language = 0;

    private void ProccessFormula()
    {
        formulaData[0] = formula.PrintFormula();

        formula.Negate();
        formulaData[1] = formula.PrintFormula();

        formula.RemoveImplications();
        formulaData[2] = formula.PrintFormula();

        formula.PushNegationInsideCompletely();
        formulaData[3] = formula.PrintFormula();

        formula.MakeQuantifiedVariablesUnique();
        formulaData[4] = formula.PrintFormula();

        formula.ToPrenexForm();
        formulaData[5] = formula.PrintFormula();

        formula.ToSkolemForm();
        formulaData[6] = formula.PrintFormula();

        formula.ClearQuantifiers();
        formulaData[7] = formula.PrintFormula();

        cnf = formula.ToCNF();
        formulaData[8] = Utils.PrintCNFasFormula(cnf);
        formulaData[9] = Utils.PrintCNFasSet(cnf);

        Factorization.CNFFactorization(cnf);
        formulaData[10] = Utils.PrintCNFasSet(cnf);

        for (int i = 0; i < cnf.Count; i++)
        {
            history.Add(new string[] {
                (i + 1).ToString(),
                Utils.PrintClause(cnf[i]),
                " ",
                " " });
            numberOfGivenClauses++;
        }
    }

    private void ResetVariables()
    {
        formula = new Formula();
        cnf.Clear();
        history.Clear();
        historyInLatex = "";
        numberOfGivenClauses = 0;
        possibleClause = null;

        selectedButton = 0;
        selectedClauseOne = -1;
        selectedClauseTwo = -1;
    }

    private void HandleButtonClick()
    {
        if (userInput == "") return;
        ResetVariables();
        string inputAfterProcessing = Utils.SequentToFormula(userInput);
        formula.ParseFormula(inputAfterProcessing);

        if (formula == new Formula()) return;
        ProccessFormula();
    }

    private void SelectButton(int number)
    {
        selectedButton = number;
    }

    private void SelectClauseForButton(int number)
    {
        if (selectedButton == 0 && selectedClauseTwo != number)
        {
            selectedClauseOne = number; 
            selectedButton = 1;
        } 
        else if (selectedButton == 1 && selectedClauseOne != number) selectedClauseTwo = number;

        if (selectedClauseOne != -1 && selectedClauseTwo != -1)
        {
            possibleClause = ResolveClauses();
            if (possibleClause != null && possibleMGU != null)
            {
                foreach (var predicate in possibleClause)
                {
                    Unification.ApplyUnificator(possibleMGU, predicate, 0);
                }
            }
        }
    }

    private Predicate[]? ResolveClauses()
    {
        alreadyExistingClause = -1;
        var clauseOneWorkingCopy = cnf[selectedClauseOne].Select(p => p.DeepCopy()).ToList();
        var clauseTwoWorkingCopy = cnf[selectedClauseTwo].Select(p => p.DeepCopy()).ToList();

        var mGU = new List<string[]>();
        bool containsComplementary = false;

        foreach (var predicateOne in clauseOneWorkingCopy)
        {
            foreach (var predicateTwo in clauseTwoWorkingCopy)
            {
                var substitutions = Unification.Unify(predicateOne, predicateTwo);

                if (substitutions != null) mGU.AddRange(substitutions);
            }
        }

        for (int i = 0; i < clauseOneWorkingCopy.Count; i++)
        {
            for (int j = 0; j < clauseTwoWorkingCopy.Count; j++)
            {
                if (Utils.AreComplementary(clauseOneWorkingCopy[i], clauseTwoWorkingCopy[j]))
                {
                    containsComplementary = true;

                    clauseOneWorkingCopy.RemoveAt(i);
                    clauseTwoWorkingCopy.RemoveAt(j);
                    i--;
                    j--;
                    break;
                }
            }
        }

        if (!containsComplementary) return null;

        possibleMGU = new List<string[]>(mGU);

        return clauseOneWorkingCopy.Concat(clauseTwoWorkingCopy).ToArray();
    }

    private void AddResolvedClause()
    {
        if (possibleClause == null) return;
        foreach (var clause in cnf)
        {           
            if (Utils.CompareClauses(clause, possibleClause))
            {
                alreadyExistingClause = cnf.IndexOf(clause);
                StateHasChanged();
                return;
            }
        }

        var resolvent = possibleClause.Select(p => p.DeepCopy()).ToArray();
        cnf.Add(resolvent);

        history.Add(new string[] {
            cnf.Count.ToString(),
            Utils.PrintClause(possibleClause),
            (selectedClauseOne + 1).ToString() + ',' + (selectedClauseTwo + 1).ToString(),
            Utils.PrintUnificator(possibleMGU) });

        possibleClause = null;
        possibleMGU = null;
        selectedClauseOne = -1;
        selectedClauseTwo = -1;
        selectedButton = 0;

    }

    private async Task CopyHistoryToClipBoard()
    {
        UpdateHistoryInLatex();
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", historyInLatex);
    }

    private void UpdateHistoryInLatex()
    {
        historyInLatex = @"\begin{table}[h]
    \centering
    \begin{tabular}{|c|c|c|c|}
    \toprule
    Step & Formula & Derivation & Unificator\\
    \midrule \midrule
";

        foreach (var row in history)
        {
            historyInLatex += "    " + row[0] + '&' + "\\{" + row[1].Trim(new char[] { '{', '}' }) + "\\}" + '&' + row[2] + '&' + row[3] + "\\\\" + "\n";
            historyInLatex += "    \\midrule";
            if (int.Parse(row[0]) == numberOfGivenClauses)
            {
                historyInLatex += " \\midrule";
            }
            historyInLatex += "\n";
        }

        historyInLatex += @"    \bottomrule
    \end{tabular}
\end{table}";
    }

    private async void AddSpecialSymbol(string symbol)
    {
        if (symbol == null) return;

        var selectionStart = await JSRuntime.InvokeAsync<int>("getSelectionStart", inputField);

        userInput = userInput.Insert(selectionStart, symbol);

        StateHasChanged();

        await inputField.FocusAsync();
        await JSRuntime.InvokeVoidAsync("setSelectionRange", inputField, selectionStart + symbol.Length, selectionStart + symbol.Length);
    }

    private void ExampleOptionSelected(ChangeEventArgs e)
    {
        int selectedOption = int.Parse(e.Value.ToString());
        SetExampleFormula(selectedOption);
    }

    private void SetExampleFormula(int index)
    {
        if (index < 0) userInput = "";
        else userInput = ExampleFormulas.Examples[index];

        StateHasChanged();
    }

    private async void HandleInput(ChangeEventArgs e)
    {
        userInput = e.Value.ToString();

        var selectionStart = await JSRuntime.InvokeAsync<int>("getSelectionStart", inputField);
        var userInputOriginalLenght = userInput.Length;
        
        CheckSpecialInput();

        var offset = userInput.Length - userInputOriginalLenght;
        await JSRuntime.InvokeVoidAsync("setSelectionRange", inputField, selectionStart + offset, selectionStart + offset);
    }

    private void CheckSpecialInput()
    {
        userInput = InputDictionary.CheckAndReplaceSpecialCharacters(userInput);
        StateHasChanged();
    }

    private void SwitchLanguage(int newLanguage)
    {
        if (newLanguage < 0) return;

        language = newLanguage;
    }
}
